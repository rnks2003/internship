Trainer : Neeraj Kumar Reddy
============================

Day 1 | 26.10.23 :
------------------

    .3-tier architecture
        .Browser   | HTML,CSS,JS
        .Server    | C/Cpp , Java , Python
        .Database  | SQL, NoSQL

    .JS Variables
        .var 
        .let 
        .const 

    .JS Data types
        .string 
        .numbers
        .null
        .boolean
        .undefined

    .JS Data structures
        .Array
        .object    | { key : value }
            .key is internally stored as string 
            .if key includes special characters, explicitly cast to string

Day 2 | 27.10.23 :
------------------

    .Array of Objects

    .Setting up VS Code for JS
        .code runner extension
    .Installing Node JS 

    .JSON          | Java Script Object Notation
        .for parsing and transmitting data

        .supports JS datatypes except 'undefined'
        .supports data structures like arrays and objects

        .key should be bounded by quotation marks(" ")
        .loops and conditional statements are not allowed

        .ObjectID
            .acts as primary key
            .12 byte hexadecimal string 
                .4 byte - Timestamp
                .5 byte - Random Value
                .3 byte - Increment

    .Database (storage container for storage of data in systematic/organised manner)
        .CRUD operations
            .Create
            .Read
            .Update
            .Delete

Day 3 | 28.10.23 :
------------------

    .MongoDB
        .Schema less | Unstructured | NoSQL
        .Platform independent
        .Its a Distributed Database | supports horizontal scaling

        .Features
            .Ad-hoc queries
            .Indexing
            .Replication
            .Load balancing
            .File storage
            .Aggregation
            .Server-side JS execution
            .Capped collections
            .Transactions
        
    .SQL vs NoSQL
        .verticle vs horizontal scaling  | Increase size of system by - upgrade vs distributed system
        .schema vs not schema based
        .RDBMS vs no RDBMS support
        .small vs large data 
        
        .ACID vs no ACID property support
            .Atomicity      : The entire transaction occurs at once else doesnt occur at all
            .Consistency    : DB must be consistent before and after transaction
            .Isolation      : Multiple transaction ocuur independently without interference
            .Durability     : Changes of successful transaction occur even if system failure occurs

        .complex query,join vs no query,join support
        .table vs document support

        .eg : sql, mysql vs MongoDB, Amazon
    
    .NoSQL DB types
        .Document DB        
            .JSON , BSON , XML 
            .MongoDB
        .Key-value DB 
            .key-value pairs | no objects
            .Amazon
        .Graph DB 
            .distributed storage
        .Column oriented DB
            .dynamically modified columns

Day 4 | 30.10.23 : 
------------------

    .Terminologies
        .table  -   collection
        .row    -   document
        .column -   property

    .Advantages of MongoDB
        .Schemaless
        .platform independent
        .supports horizontal scaling

    .Disadvantages of MongoDB
        .Doesnt support ACID properties
        .requires more space
        .cant fetch from multiple collections at a time 
        .doesnt support join
        .no auto-cleanup of disk space 

    .Basic commands
        .enter console
            .mongosh
        .clear console
            .cls 
            .console.clear()
            .control + l | ( ^ + l )
        .see current database 
            .db 
        .list databases
            .show dbs
        .list collections
            .show collections
        .check if collection is capped  
            .db.collectionName.isCapped() | true if capped

    .CRUD operations
        .Create
            .Create a database  
                .syntax : use databaseName
            .Create a collection
                .Uncapped collection
                    .explicit method
                        .syntax : db.createCollection("CollectionName")
                    .implicit method
                        .syntax : db.collectionName.insertOne({})
                .Capped collection
                    .syntax : db.createCollection("CollectionName",
                                                  { capped : true, size :<inBytes>, max : <noOfDocuments> })
                
        .Delete
            .Delete a collection
                .syntax : db.collectionName.drop()
            .Delete a database
                .syntax : db.databaseName.drop()            | delete empty database 
                .syntax : db.dropDatabase("databaseName")   | delete entire database, including all collections
        